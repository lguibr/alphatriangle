run_interactive.py:10:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
11 | project_root = os.path.dirname(script_dir)
12 | if project_root not in sys.path:
   |

run_interactive.py:10:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
11 | project_root = os.path.dirname(script_dir)
12 | if project_root not in sys.path:
   |

run_interactive.py:11:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
11 | project_root = os.path.dirname(script_dir)
   |                ^^^^^^^^^^^^^^^ PTH120
12 | if project_root not in sys.path:
13 |     sys.path.insert(0, project_root)
   |

run_shape_editor.py:10:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
11 | src_dir = os.path.join(script_dir, "src")
12 | if src_dir not in sys.path:
   |

run_shape_editor.py:10:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
11 | src_dir = os.path.join(script_dir, "src")
12 | if src_dir not in sys.path:
   |

run_shape_editor.py:11:11: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
 9 | # Ensure the src directory is in the Python path
10 | script_dir = os.path.dirname(os.path.abspath(__file__))
11 | src_dir = os.path.join(script_dir, "src")
   |           ^^^^^^^^^^^^ PTH118
12 | if src_dir not in sys.path:
13 |     sys.path.insert(0, src_dir)
   |

run_shape_editor.py:16:1: E402 Module level import not at top of file
   |
15 | # Imports from your project structure
16 | from src import config, environment, structs, visualization
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 |
18 | # Basic logging setup
   |

run_shape_editor.py:128:28: B007 Loop control variable `color` not used within loop body
    |
127 |         num_shapes = len(self.saved_shapes)
128 |         for i, (triangles, color) in enumerate(self.saved_shapes):
    |                            ^^^^^ B007
129 |             print(f"    [ # Shape {i + 1}")  # Start of the inner list for this shape
130 |             num_triangles = len(triangles)
    |
    = help: Rename unused `color` to `_color`

run_shape_editor.py:163:9: SIM105 Use `contextlib.suppress(ValueError)` instead of `try`-`except`-`pass`
    |
161 |           """Cycles through the available shape colors."""
162 |           current_index = -1
163 | /         try:
164 | |             current_index = structs.SHAPE_COLORS.index(self.current_shape_color)
165 | |         except ValueError:
166 | |             pass  # Color not found, start from beginning
    | |________________^ SIM105
167 |           next_index = (current_index + 1) % len(structs.SHAPE_COLORS)
168 |           self.current_shape_color = structs.SHAPE_COLORS[next_index]
    |
    = help: Replace with `contextlib.suppress(ValueError)`

run_shape_editor.py:211:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
209 |                   except pygame.error as e:
210 |                       logger.error(f"Error resizing window: {e}")
211 | /             if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
212 | |                 if grid_rect and grid_rect.collidepoint(mouse_pos):
    | |___________________________________________________________________^ SIM102
213 |                       click_coords = visualization.get_grid_coords_from_screen(
214 |                           mouse_pos, grid_rect, self.env_config
    |
    = help: Combine `if` statements using `and`

run_shape_editor.py:437:13: F841 Local variable `dt` is assigned to but never used
    |
435 |         """Main application loop."""
436 |         while self.running:
437 |             dt = self.clock.tick(self.vis_config.FPS) / 1000.0
    |             ^^ F841
438 |             self.handle_events()
439 |             self.render()
    |
    = help: Remove assignment to unused variable `dt`

run_training_headless.py:11:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
12 | project_root = os.path.dirname(script_dir)
13 | if project_root not in sys.path:
   |

run_training_headless.py:11:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
12 | project_root = os.path.dirname(script_dir)
13 | if project_root not in sys.path:
   |

run_training_headless.py:12:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
12 | project_root = os.path.dirname(script_dir)
   |                ^^^^^^^^^^^^^^^ PTH120
13 | if project_root not in sys.path:
14 |     sys.path.insert(0, project_root)
   |

run_training_visual.py:11:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
12 | project_root = os.path.dirname(script_dir)
13 | if project_root not in sys.path:
   |

run_training_visual.py:11:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
12 | project_root = os.path.dirname(script_dir)
13 | if project_root not in sys.path:
   |

run_training_visual.py:12:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
10 | # Ensure the src directory is in the Python path
11 | script_dir = os.path.dirname(os.path.abspath(__file__))
12 | project_root = os.path.dirname(script_dir)
   |                ^^^^^^^^^^^^^^^ PTH120
13 | if project_root not in sys.path:
14 |     sys.path.insert(0, project_root)
   |

src/app.py:61:13: F841 Local variable `dt` is assigned to but never used
   |
59 |         logger.info(f"Starting application in {self.mode} mode.")
60 |         while self.running:
61 |             dt = (
   |             ^^ F841
62 |                 self.clock.tick(self.vis_config.FPS) / 1000.0
63 |             )  # Delta time (unused currently)
   |
   = help: Remove assignment to unused variable `dt`

src/app.py:78:21: SIM102 Use a single `if` statement instead of nested `if` statements
   |
76 |                           self.running = False
77 |                       # Basic resize handling needed even without input handler
78 | /                     if event.type == pygame.VIDEORESIZE:
79 | |                         if self.visualizer:
   | |___________________________________________^ SIM102
80 |                               try:
81 |                                   w, h = max(320, event.w), max(240, event.h)
   |
   = help: Combine `if` statements using `and`

src/cli.py:12:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
10 | # but this shouldn't be necessary when installed as a package.
11 | # Keep it for potential direct script execution during development.
12 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
13 | project_root = os.path.dirname(script_dir)
14 | if project_root not in sys.path:
   |

src/cli.py:12:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
10 | # but this shouldn't be necessary when installed as a package.
11 | # Keep it for potential direct script execution during development.
12 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
13 | project_root = os.path.dirname(script_dir)
14 | if project_root not in sys.path:
   |

src/cli.py:13:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
11 | # Keep it for potential direct script execution during development.
12 | script_dir = os.path.dirname(os.path.abspath(__file__))
13 | project_root = os.path.dirname(script_dir)
   |                ^^^^^^^^^^^^^^^ PTH120
14 | if project_root not in sys.path:
15 |     sys.path.insert(0, project_root)
   |

src/config/model_config.py:80:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
78 |       def check_residual_filter_match(self) -> "ModelConfig":
79 |           # Check if the input to the first residual block matches the last conv filter
80 | /         if self.NUM_RESIDUAL_BLOCKS > 0 and self.CONV_FILTERS:
81 | |             if self.CONV_FILTERS[-1] != self.RESIDUAL_BLOCK_FILTERS:
   | |____________________________________________________________________^ SIM102
82 |                   # This warning is now handled by the projection layer in the model if needed
83 |                   # print(
   |
   = help: Combine `if` statements using `and`

src/config/validation.py:25:36: F821 Undefined name `BaseModel`
   |
23 |     configs_validated: dict[str, Any] = {}
24 |
25 |     config_classes: dict[str, type[BaseModel]] = {
   |                                    ^^^^^^^^^ F821
26 |         "Environment": EnvConfig,
27 |         "Model": ModelConfig,
   |

src/config/validation.py:35:19: F821 Undefined name `BaseModel`
   |
34 |     for name, ConfigClass in config_classes.items():
35 |         instance: BaseModel | None = None  # Initialize instance as None
   |                   ^^^^^^^^^ F821
36 |         try:
37 |             if name == "MCTS":
   |

src/data/data_manager.py:52:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
50 |             )
51 |
52 |         os.makedirs(self.persist_config.ROOT_DATA_DIR, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
53 |         self._update_paths()
54 |         self._create_directories()
   |

src/data/data_manager.py:62:31: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
60 |         """Updates paths based on the current RUN_NAME."""
61 |         self.run_base_dir = self.persist_config.get_run_base_dir()
62 |         self.checkpoint_dir = os.path.join(
   |                               ^^^^^^^^^^^^ PTH118
63 |             self.run_base_dir, self.persist_config.CHECKPOINT_SAVE_DIR_NAME
64 |         )
   |

src/data/data_manager.py:65:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
63 |             self.run_base_dir, self.persist_config.CHECKPOINT_SAVE_DIR_NAME
64 |         )
65 |         self.buffer_dir = os.path.join(
   |                           ^^^^^^^^^^^^ PTH118
66 |             self.run_base_dir, self.persist_config.BUFFER_SAVE_DIR_NAME
67 |         )
   |

src/data/data_manager.py:68:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
66 |             self.run_base_dir, self.persist_config.BUFFER_SAVE_DIR_NAME
67 |         )
68 |         self.log_dir = os.path.join(self.run_base_dir, self.persist_config.LOG_DIR_NAME)
   |                        ^^^^^^^^^^^^ PTH118
69 |         self.config_path = os.path.join(
70 |             self.run_base_dir, self.persist_config.CONFIG_FILENAME
   |

src/data/data_manager.py:69:28: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
67 |         )
68 |         self.log_dir = os.path.join(self.run_base_dir, self.persist_config.LOG_DIR_NAME)
69 |         self.config_path = os.path.join(
   |                            ^^^^^^^^^^^^ PTH118
70 |             self.run_base_dir, self.persist_config.CONFIG_FILENAME
71 |         )
   |

src/data/data_manager.py:75:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
73 |     def _create_directories(self):
74 |         """Creates necessary temporary directories for the current run."""
75 |         os.makedirs(self.run_base_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
76 |         os.makedirs(self.checkpoint_dir, exist_ok=True)
77 |         os.makedirs(self.log_dir, exist_ok=True)
   |

src/data/data_manager.py:76:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
74 |         """Creates necessary temporary directories for the current run."""
75 |         os.makedirs(self.run_base_dir, exist_ok=True)
76 |         os.makedirs(self.checkpoint_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
77 |         os.makedirs(self.log_dir, exist_ok=True)
78 |         if self.persist_config.SAVE_BUFFER:
   |

src/data/data_manager.py:77:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
75 |         os.makedirs(self.run_base_dir, exist_ok=True)
76 |         os.makedirs(self.checkpoint_dir, exist_ok=True)
77 |         os.makedirs(self.log_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
78 |         if self.persist_config.SAVE_BUFFER:
79 |             os.makedirs(self.buffer_dir, exist_ok=True)
   |

src/data/data_manager.py:79:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
77 |         os.makedirs(self.log_dir, exist_ok=True)
78 |         if self.persist_config.SAVE_BUFFER:
79 |             os.makedirs(self.buffer_dir, exist_ok=True)
   |             ^^^^^^^^^^^ PTH103
80 |
81 |     def get_checkpoint_path(
   |

src/data/data_manager.py:92:26: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
90 |         target_run_name = run_name if run_name else self.persist_config.RUN_NAME
91 |         base_dir = self.persist_config.get_run_base_dir(target_run_name)
92 |         checkpoint_dir = os.path.join(
   |                          ^^^^^^^^^^^^ PTH118
93 |             base_dir, self.persist_config.CHECKPOINT_SAVE_DIR_NAME
94 |         )
   |

src/data/data_manager.py:106:19: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
104 |             # Default to latest if no specific type is given
105 |             filename = self.persist_config.LATEST_CHECKPOINT_FILENAME
106 |         base, _ = os.path.splitext(filename)
    |                   ^^^^^^^^^^^^^^^^ PTH122
107 |         filename_pkl = base + ".pkl"
108 |         return os.path.join(checkpoint_dir, filename_pkl)
    |

src/data/data_manager.py:108:16: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
106 |         base, _ = os.path.splitext(filename)
107 |         filename_pkl = base + ".pkl"
108 |         return os.path.join(checkpoint_dir, filename_pkl)
    |                ^^^^^^^^^^^^ PTH118
109 |
110 |     def get_buffer_path(
    |

src/data/data_manager.py:119:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
117 |         target_run_name = run_name if run_name else self.persist_config.RUN_NAME
118 |         base_dir = self.persist_config.get_run_base_dir(target_run_name)
119 |         buffer_dir = os.path.join(base_dir, self.persist_config.BUFFER_SAVE_DIR_NAME)
    |                      ^^^^^^^^^^^^ PTH118
120 |         if is_final and step is not None:
121 |             filename = f"buffer_final_step_{step}.pkl"
    |

src/data/data_manager.py:127:16: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
125 |         else:
126 |             filename = self.persist_config.BUFFER_FILENAME
127 |         return os.path.join(buffer_dir, filename)
    |                ^^^^^^^^^^^^ PTH118
128 |
129 |     def find_latest_run_dir(self, current_run_name: str) -> str | None:
    |

src/data/data_manager.py:131:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
129 |     def find_latest_run_dir(self, current_run_name: str) -> str | None:
130 |         """Finds the most recent *previous* run directory based on name sorting."""
131 |         runs_root_dir = os.path.join(
    |                         ^^^^^^^^^^^^ PTH118
132 |             self.persist_config.ROOT_DATA_DIR, self.persist_config.RUNS_DIR_NAME
133 |         )
    |

src/data/data_manager.py:135:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
133 |         )
134 |         try:
135 |             if not os.path.exists(runs_root_dir):
    |                    ^^^^^^^^^^^^^^ PTH110
136 |                 return None
137 |             # Get all subdirectories in the runs directory
    |

src/data/data_manager.py:140:26: PTH208 Use `pathlib.Path.iterdir()` instead.
    |
138 |             potential_dirs = [
139 |                 d
140 |                 for d in os.listdir(runs_root_dir)
    |                          ^^^^^^^^^^ PTH208
141 |                 if os.path.isdir(os.path.join(runs_root_dir, d))
142 |                 and d != current_run_name  # Exclude the current run
    |

src/data/data_manager.py:141:20: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
    |
139 |                 d
140 |                 for d in os.listdir(runs_root_dir)
141 |                 if os.path.isdir(os.path.join(runs_root_dir, d))
    |                    ^^^^^^^^^^^^^ PTH112
142 |                 and d != current_run_name  # Exclude the current run
143 |             ]
    |

src/data/data_manager.py:141:34: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
139 |                 d
140 |                 for d in os.listdir(runs_root_dir)
141 |                 if os.path.isdir(os.path.join(runs_root_dir, d))
    |                                  ^^^^^^^^^^^^ PTH118
142 |                 and d != current_run_name  # Exclude the current run
143 |             ]
    |

src/data/data_manager.py:167:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
165 |         # 1. Priority: Explicit path from config
166 |         if load_path_config:
167 |             if os.path.exists(load_path_config):
    |                ^^^^^^^^^^^^^^ PTH110
168 |                 checkpoint_to_load = os.path.abspath(load_path_config)
169 |                 logger.info(f"Using specified checkpoint path: {checkpoint_to_load}")
    |

src/data/data_manager.py:168:38: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
166 |         if load_path_config:
167 |             if os.path.exists(load_path_config):
168 |                 checkpoint_to_load = os.path.abspath(load_path_config)
    |                                      ^^^^^^^^^^^^^^^ PTH100
169 |                 logger.info(f"Using specified checkpoint path: {checkpoint_to_load}")
170 |             else:
    |

src/data/data_manager.py:182:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
180 |                     run_name=latest_run_name, is_latest=True
181 |                 )
182 |                 if os.path.exists(potential_latest_path):
    |                    ^^^^^^^^^^^^^^ PTH110
183 |                     checkpoint_to_load = os.path.abspath(potential_latest_path)
184 |                     logger.info(
    |

src/data/data_manager.py:183:42: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
181 |                 )
182 |                 if os.path.exists(potential_latest_path):
183 |                     checkpoint_to_load = os.path.abspath(potential_latest_path)
    |                                          ^^^^^^^^^^^^^^^ PTH100
184 |                     logger.info(
185 |                         f"Auto-resuming from latest checkpoint in previous run '{latest_run_name}': {checkpoint_to_load}"
    |

src/data/data_manager.py:209:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
207 |         # 1. Priority: Explicit path from config
208 |         if self.train_config.LOAD_BUFFER_PATH:
209 |             if os.path.exists(self.train_config.LOAD_BUFFER_PATH):
    |                ^^^^^^^^^^^^^^ PTH110
210 |                 logger.info(
211 |                     f"Using specified buffer path: {self.train_config.LOAD_BUFFER_PATH}"
    |

src/data/data_manager.py:213:24: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
211 |                     f"Using specified buffer path: {self.train_config.LOAD_BUFFER_PATH}"
212 |                 )
213 |                 return os.path.abspath(self.train_config.LOAD_BUFFER_PATH)
    |                        ^^^^^^^^^^^^^^^ PTH100
214 |             else:
215 |                 logger.warning(
    |

src/data/data_manager.py:224:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
222 |                 run_name=checkpoint_run_name
223 |             )  # Use default buffer name
224 |             if os.path.exists(potential_buffer_path):
    |                ^^^^^^^^^^^^^^ PTH110
225 |                 logger.info(
226 |                     f"Loading buffer from checkpoint run '{checkpoint_run_name}': {potential_buffer_path}"
    |

src/data/data_manager.py:228:24: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
226 |                     f"Loading buffer from checkpoint run '{checkpoint_run_name}': {potential_buffer_path}"
227 |                 )
228 |                 return os.path.abspath(potential_buffer_path)
    |                        ^^^^^^^^^^^^^^^ PTH100
229 |             else:
230 |                 logger.info(
    |

src/data/data_manager.py:243:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
241 | …         run_name=latest_previous_run_name
242 | …     )
243 | …     if os.path.exists(potential_buffer_path):
    |          ^^^^^^^^^^^^^^ PTH110
244 | …         logger.info(
245 | …             f"Auto-resuming buffer from latest previous run '{latest_previous_run_name}' (no checkpoint loaded): {potential_buffer_…
    |

src/data/data_manager.py:247:28: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
245 | …             f"Auto-resuming buffer from latest previous run '{latest_previous_run_name}' (no checkpoint loaded): {potential_buffer_…
246 | …         )
247 | …         return os.path.abspath(potential_buffer_path)
    |                  ^^^^^^^^^^^^^^^ PTH100
248 | …     else:
249 | …         logger.info(
    |

src/data/data_manager.py:270:22: PTH123 `open()` should be replaced by `Path.open()`
    |
268 |             logger.info(f"Loading checkpoint: {checkpoint_to_load}")
269 |             try:
270 |                 with open(checkpoint_to_load, "rb") as f:
    |                      ^^^^ PTH123
271 |                     loaded_checkpoint_model = cloudpickle.load(f)
272 |                 if isinstance(loaded_checkpoint_model, CheckpointData):
    |

src/data/data_manager.py:302:26: PTH123 `open()` should be replaced by `Path.open()`
    |
300 |                 logger.info(f"Loading buffer: {buffer_to_load}")
301 |                 try:
302 |                     with open(buffer_to_load, "rb") as f:
    |                          ^^^^ PTH123
303 |                         loaded_buffer_model = cloudpickle.load(f)
304 |                     if isinstance(loaded_buffer_model, BufferData):
    |

src/data/data_manager.py:318:37: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
316 | …                         and isinstance(exp[0]["other_features"], np.ndarray)
317 | …                         and isinstance(exp[1], dict)
318 | …                         and isinstance(exp[2], (float, int))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
319 | …                     ):
320 | …                         valid_experiences.append(exp)
    |
    = help: Convert to `X | Y`

src/data/data_manager.py:424:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
422 |         saved_checkpoint_path = None
423 |         try:
424 |             os.makedirs(os.path.dirname(step_checkpoint_path), exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
425 |             with open(step_checkpoint_path, "wb") as f:
426 |                 cloudpickle.dump(checkpoint_data, f)
    |

src/data/data_manager.py:424:25: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
422 |         saved_checkpoint_path = None
423 |         try:
424 |             os.makedirs(os.path.dirname(step_checkpoint_path), exist_ok=True)
    |                         ^^^^^^^^^^^^^^^ PTH120
425 |             with open(step_checkpoint_path, "wb") as f:
426 |                 cloudpickle.dump(checkpoint_data, f)
    |

src/data/data_manager.py:425:18: PTH123 `open()` should be replaced by `Path.open()`
    |
423 |         try:
424 |             os.makedirs(os.path.dirname(step_checkpoint_path), exist_ok=True)
425 |             with open(step_checkpoint_path, "wb") as f:
    |                  ^^^^ PTH123
426 |                 cloudpickle.dump(checkpoint_data, f)
427 |             logger.info(f"Checkpoint temporarily saved to {step_checkpoint_path}")
    |

src/data/data_manager.py:483:29: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
481 |                         and isinstance(exp[0]["other_features"], np.ndarray)
482 |                         and isinstance(exp[1], dict)
483 |                         and isinstance(exp[2], (float, int))
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
484 |                     ):
485 |                         valid_experiences.append(exp)
    |
    = help: Convert to `X | Y`

src/data/data_manager.py:497:17: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
496 |                 buffer_data = BufferData(buffer_list=valid_experiences)
497 |                 os.makedirs(os.path.dirname(buffer_path), exist_ok=True)
    |                 ^^^^^^^^^^^ PTH103
498 |                 with open(buffer_path, "wb") as f:
499 |                     cloudpickle.dump(buffer_data, f)
    |

src/data/data_manager.py:497:29: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
496 |                 buffer_data = BufferData(buffer_list=valid_experiences)
497 |                 os.makedirs(os.path.dirname(buffer_path), exist_ok=True)
    |                             ^^^^^^^^^^^^^^^ PTH120
498 |                 with open(buffer_path, "wb") as f:
499 |                     cloudpickle.dump(buffer_data, f)
    |

src/data/data_manager.py:498:22: PTH123 `open()` should be replaced by `Path.open()`
    |
496 |                 buffer_data = BufferData(buffer_list=valid_experiences)
497 |                 os.makedirs(os.path.dirname(buffer_path), exist_ok=True)
498 |                 with open(buffer_path, "wb") as f:
    |                      ^^^^ PTH123
499 |                     cloudpickle.dump(buffer_data, f)
500 |                 logger.info(f"Experience buffer temporarily saved to {buffer_path}")
    |

src/data/data_manager.py:504:26: PTH123 `open()` should be replaced by `Path.open()`
    |
502 |                 try:
503 |                     # Always update the default buffer file
504 |                     with open(default_buffer_path, "wb") as f_default:
    |                          ^^^^ PTH123
505 |                         cloudpickle.dump(buffer_data, f_default)
506 |                     logger.debug(f"Updated default buffer file: {default_buffer_path}")
    |

src/data/data_manager.py:530:36: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
528 |         """Logs saved checkpoint and buffer files to MLflow."""
529 |         try:
530 |             if checkpoint_path and os.path.exists(checkpoint_path):
    |                                    ^^^^^^^^^^^^^^ PTH110
531 |                 ckpt_artifact_path = self.persist_config.CHECKPOINT_SAVE_DIR_NAME
532 |                 mlflow.log_artifact(checkpoint_path, artifact_path=ckpt_artifact_path)
    |

src/data/data_manager.py:536:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
534 |                     run_name=run_name, is_latest=True
535 |                 )
536 |                 if os.path.exists(latest_path):
    |                    ^^^^^^^^^^^^^^ PTH110
537 |                     mlflow.log_artifact(latest_path, artifact_path=ckpt_artifact_path)
538 |                 if is_best:
    |

src/data/data_manager.py:542:24: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
540 |                         run_name=run_name, is_best=True
541 |                     )
542 |                     if os.path.exists(best_path):
    |                        ^^^^^^^^^^^^^^ PTH110
543 |                         mlflow.log_artifact(best_path, artifact_path=ckpt_artifact_path)
544 |                 logger.info(
    |

src/data/data_manager.py:547:32: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
545 |                     f"Logged checkpoint artifacts to MLflow path: {ckpt_artifact_path}"
546 |                 )
547 |             if buffer_path and os.path.exists(buffer_path):
    |                                ^^^^^^^^^^^^^^ PTH110
548 |                 buffer_artifact_path = self.persist_config.BUFFER_SAVE_DIR_NAME
549 |                 # Log the step-specific buffer if it was created
    |

src/data/data_manager.py:553:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
551 |                 # Always log the default buffer file as well
552 |                 default_buffer_path = self.get_buffer_path(run_name=run_name)
553 |                 if os.path.exists(default_buffer_path):
    |                    ^^^^^^^^^^^^^^ PTH110
554 |                     mlflow.log_artifact(
555 |                         default_buffer_path, artifact_path=buffer_artifact_path
    |

src/data/data_manager.py:567:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
565 |         try:
566 |             config_path = self.config_path
567 |             os.makedirs(os.path.dirname(config_path), exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
568 |             with open(config_path, "w") as f:
    |

src/data/data_manager.py:567:25: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
565 |         try:
566 |             config_path = self.config_path
567 |             os.makedirs(os.path.dirname(config_path), exist_ok=True)
    |                         ^^^^^^^^^^^^^^^ PTH120
568 |             with open(config_path, "w") as f:
    |

src/data/data_manager.py:568:18: PTH123 `open()` should be replaced by `Path.open()`
    |
566 |             config_path = self.config_path
567 |             os.makedirs(os.path.dirname(config_path), exist_ok=True)
568 |             with open(config_path, "w") as f:
    |                  ^^^^ PTH123
569 |
570 |                 def default_serializer(obj):
    |

src/data/data_manager.py:571:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
570 |                 def default_serializer(obj):
571 |                     if isinstance(obj, (torch.Tensor, np.ndarray)):
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
572 |                         return "<tensor/array>"
573 |                     if isinstance(obj, deque):
    |
    = help: Convert to `X | Y`

src/environment/grid/grid_data.py:3:21: F401 [*] `pathlib.Path` imported but unused
  |
1 | # File: src/environment/grid/grid_data.py
2 | import logging
3 | from pathlib import Path  # Import Path
  |                     ^^^^ F401
4 |
5 | import numpy as np
  |
  = help: Remove unused import: `pathlib.Path`

src/environment/logic/step.py:3:1: UP035 `typing.Set` is deprecated, use `set` instead
  |
1 | import logging
2 | import random
3 | from typing import TYPE_CHECKING, Set
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
4 |
5 | from src.structs import Triangle
  |

src/environment/logic/step.py:3:35: F401 [*] `typing.Set` imported but unused
  |
1 | import logging
2 | import random
3 | from typing import TYPE_CHECKING, Set
  |                                   ^^^ F401
4 |
5 | from src.structs import Triangle
  |
  = help: Remove unused import: `typing.Set`

src/environment/shapes/logic.py:52:23: C401 Unnecessary generator (rewrite as a set comprehension)
   |
51 |     adj: dict[tuple[int, int], list[tuple[int, int]]] = {}
52 |     triangle_coords = set((r, c) for r, c, _ in triangles)
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C401
53 |
54 |     for r, c, is_up in triangles:
   |
   = help: Rewrite as a set comprehension

src/interaction/debug_mode_handler.py:8:25: TC001 Move application import `src.structs.Triangle` into a type-checking block
  |
7 | from src.environment import grid as env_grid
8 | from src.structs import Triangle
  |                         ^^^^^^^^ TC001
9 | from src.visualization import core as vis_core
  |
  = help: Move into type-checking block

src/interaction/input_handler.py:7:25: TC001 Move application import `src.structs.Shape` into a type-checking block
  |
6 | from src import environment, visualization
7 | from src.structs import Shape  # Import Shape
  |                         ^^^^^ TC001
8 |
9 | from . import debug_mode_handler, event_processor, play_mode_handler
  |
  = help: Move into type-checking block

src/interaction/play_mode_handler.py:9:25: TC001 Move application import `src.structs.Shape` into a type-checking block
   |
 7 | from src.environment import core as env_core
 8 | from src.environment import grid as env_grid
 9 | from src.structs import Shape
   |                         ^^^^^ TC001
10 | from src.visualization import core as vis_core
   |
   = help: Move into type-checking block

src/mcts/core/node.py:64:9: F841 Local variable `parent_action` is assigned to but never used
   |
63 |     def __repr__(self) -> str:
64 |         parent_action = self.parent.action_taken if self.parent else "Root"
   |         ^^^^^^^^^^^^^ F841
65 |         return (
66 |             f"Node(StateStep={self.state.current_step}, "
   |
   = help: Remove assignment to unused variable `parent_action`

src/mcts/strategy/expansion.py:4:28: TC001 Move application import `...utils.types.ActionType` into a type-checking block
  |
2 | import logging
3 |
4 | from ...utils.types import ActionType
  |                            ^^^^^^^^^^ TC001
5 | from ..core.node import Node
6 | from ..core.types import (
  |
  = help: Move into type-checking block

src/mcts/strategy/selection.py:60:13: NPY002 Replace legacy `np.random.dirichlet` call with `np.random.Generator`
   |
59 |     actions = list(node.children.keys())
60 |     noise = np.random.dirichlet([config.dirichlet_alpha] * len(actions))
   |             ^^^^^^^^^^^^^^^^^^^ NPY002
61 |     eps = config.dirichlet_epsilon
   |

src/nn/model.py:3:1: UP035 `typing.Type` is deprecated, use `type` instead
  |
1 | # File: src/nn/model.py
2 | import math
3 | from typing import Type  # Import Type
  | ^^^^^^^^^^^^^^^^^^^^^^^ UP035
4 |
5 | import torch
  |

src/nn/model.py:18:17: UP006 [*] Use `type` instead of `Type` for type annotation
   |
16 |     padding: int | tuple[int, int] | str,
17 |     use_batch_norm: bool,
18 |     activation: Type[nn.Module],
   |                 ^^^^ UP006
19 | ) -> nn.Sequential:
20 |     """Creates a standard convolutional block."""
   |
   = help: Replace with `type`

src/nn/model.py:41:64: UP006 [*] Use `type` instead of `Type` for type annotation
   |
40 |     def __init__(
41 |         self, channels: int, use_batch_norm: bool, activation: Type[nn.Module]
   |                                                                ^^^^ UP006
42 |     ):
43 |         super().__init__()
   |
   = help: Replace with `type`

src/nn/model.py:95:25: UP006 [*] Use `type` instead of `Type` for type annotation
   |
93 |         self.action_dim = env_config.ACTION_DIM
94 |
95 |         activation_cls: Type[nn.Module] = getattr(nn, model_config.ACTIVATION_FUNCTION)
   |                         ^^^^ UP006
96 |
97 |         # --- CNN Body ---
   |
   = help: Replace with `type`

src/nn/model.py:183:17: F841 Local variable `transformer_input_dummy` is assigned to but never used
    |
181 |                 b, d, h, w = proj_out.shape
182 |                 # Reshape for transformer: (Seq, Batch, Dim) -> (H*W, B, D)
183 |                 transformer_input_dummy = proj_out.flatten(2).permute(2, 0, 1)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ F841
184 |                 # Positional encoding added in forward pass
185 |                 # Transformer output shape is (Seq, Batch, Dim)
    |
    = help: Remove assignment to unused variable `transformer_input_dummy`

src/nn/network.py:2:29: TC003 Move standard library import `collections.abc.Mapping` into a type-checking block
  |
1 | import logging
2 | from collections.abc import Mapping
  |                             ^^^^^^^ TC003
3 |
4 | import numpy as np
  |
  = help: Move into type-checking block

src/rl/core/trainer.py:3:20: F401 [*] `typing.Any` imported but unused
  |
1 | # File: src/rl/core/trainer.py
2 | import logging
3 | from typing import Any
  |                    ^^^ F401
4 |
5 | import numpy as np
  |
  = help: Remove unused import: `typing.Any`

src/rl/core/visual_state_actor.py:43:44: TC010 Invalid string member in `X | Y`-style union type
   |
41 |         return combined_states
42 |
43 |     def get_state(self, worker_id: int) -> "GameState" | None:
   |                                            ^^^^^^^^^^^ TC010
44 |         """Get state for a specific worker (unused currently)."""
45 |         return self.worker_states.get(worker_id)
   |

src/rl/self_play/worker.py:22:29: TC001 Move application import `src.utils.types.Experience` into a type-checking block
   |
20 | from src.nn import NeuralNetwork
21 | from src.utils import get_device, set_random_seeds
22 | from src.utils.types import Experience, PolicyTargetMapping, StateType
   |                             ^^^^^^^^^^ TC001
23 |
24 | from ..types import SelfPlayResult
   |
   = help: Move into type-checking block

src/rl/self_play/worker.py:22:41: TC001 Move application import `src.utils.types.PolicyTargetMapping` into a type-checking block
   |
20 | from src.nn import NeuralNetwork
21 | from src.utils import get_device, set_random_seeds
22 | from src.utils.types import Experience, PolicyTargetMapping, StateType
   |                                         ^^^^^^^^^^^^^^^^^^^ TC001
23 |
24 | from ..types import SelfPlayResult
   |
   = help: Move into type-checking block

src/rl/self_play/worker.py:22:62: TC001 Move application import `src.utils.types.StateType` into a type-checking block
   |
20 | from src.nn import NeuralNetwork
21 | from src.utils import get_device, set_random_seeds
22 | from src.utils.types import Experience, PolicyTargetMapping, StateType
   |                                                              ^^^^^^^^^ TC001
23 |
24 | from ..types import SelfPlayResult
   |
   = help: Move into type-checking block

src/rl/types.py:37:13: B007 Loop control variable `i` not used within loop body
   |
35 |         invalid_count = 0
36 |         valid_experiences = []
37 |         for i, exp in enumerate(self.episode_experiences):
   |             ^ B007
38 |             is_valid = False
39 |             if isinstance(exp, tuple) and len(exp) == 3:
   |
   = help: Rename unused `i` to `_i`

src/rl/types.py:41:17: SIM102 Use a single `if` statement instead of nested `if` statements
   |
39 |               if isinstance(exp, tuple) and len(exp) == 3:
40 |                   state_type, policy_map, value = exp
41 | /                 if (
42 | |                     isinstance(state_type, dict)
43 | |                     and "grid" in state_type
44 | |                     and "other_features" in state_type
45 | |                     and isinstance(state_type["grid"], np.ndarray)
46 | |                     and isinstance(state_type["other_features"], np.ndarray)
47 | |                     and isinstance(policy_map, dict)
48 | |                     and isinstance(value, (float, int))
49 | |                 ):
50 | |                     # Basic check for NaN/inf in features
51 | |                     if np.all(np.isfinite(state_type["grid"])) and np.all(
52 | |                         np.isfinite(state_type["other_features"])
53 | |                     ):
   | |______________________^ SIM102
54 |                           is_valid = True
   |
   = help: Combine `if` statements using `and`

src/rl/types.py:48:25: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
46 |                     and isinstance(state_type["other_features"], np.ndarray)
47 |                     and isinstance(policy_map, dict)
48 |                     and isinstance(value, (float, int))
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
49 |                 ):
50 |                     # Basic check for NaN/inf in features
   |
   = help: Convert to `X | Y`

src/stats/plot_utils.py:3:20: F401 [*] `typing.cast` imported but unused
  |
1 | # File: src/stats/plot_utils.py
2 | import logging
3 | from typing import cast
  |                    ^^^^ F401
4 |
5 | import matplotlib.pyplot as plt
  |
  = help: Remove unused import: `typing.cast`

src/stats/plotter.py:8:17: TC002 Move third-party import `numpy` into a type-checking block
  |
7 | import matplotlib
8 | import numpy as np
  |                 ^^ TC002
9 | import pygame
  |
  = help: Move into type-checking block

src/stats/plotter.py:320:17: F841 Local variable `cache_status` is assigned to but never used
    |
318 |                     cache_status = "ERROR (Update Failed)"
319 |             elif self.plot_surface_cache is None:
320 |                 cache_status = "MISS (Cache None)"
    |                 ^^^^^^^^^^^^ F841
321 |                 if self.fig is None:
322 |                     self._init_figure(target_width, target_height)
    |
    = help: Remove assignment to unused variable `cache_status`

src/training/logging_utils.py:101:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
 99 |     """Sets up file logging for the current run."""
100 |     run_base_dir = persist_config.get_run_base_dir(run_name)
101 |     log_dir = os.path.join(run_base_dir, persist_config.LOG_DIR_NAME)
    |               ^^^^^^^^^^^^ PTH118
102 |     os.makedirs(log_dir, exist_ok=True)
103 |     log_file_path = os.path.join(log_dir, f"{run_name}_{mode_suffix}.log")
    |

src/training/logging_utils.py:102:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
100 |     run_base_dir = persist_config.get_run_base_dir(run_name)
101 |     log_dir = os.path.join(run_base_dir, persist_config.LOG_DIR_NAME)
102 |     os.makedirs(log_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
103 |     log_file_path = os.path.join(log_dir, f"{run_name}_{mode_suffix}.log")
    |

src/training/logging_utils.py:103:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
101 |     log_dir = os.path.join(run_base_dir, persist_config.LOG_DIR_NAME)
102 |     os.makedirs(log_dir, exist_ok=True)
103 |     log_file_path = os.path.join(log_dir, f"{run_name}_{mode_suffix}.log")
    |                     ^^^^^^^^^^^^ PTH118
104 |
105 |     file_handler = logging.FileHandler(log_file_path, mode="w")
    |

src/training/logging_utils.py:159:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
157 |         numeric_metrics = {}
158 |         for k, v in metrics.items():
159 |             if isinstance(v, (int, float, np.number)) and np.isfinite(v):
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
160 |                 numeric_metrics[k] = float(v)
161 |             else:
    |
    = help: Convert to `X | Y`

src/training/loop.py:21:25: TC001 Move application import `.components.TrainingComponents` into a type-checking block
   |
20 | # Import TrainingComponents type hint
21 | from .components import TrainingComponents
   |                         ^^^^^^^^^^^^^^^^^^ TC001
22 |
23 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/training/loop.py:367:29: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
365 |                         and isinstance(state_type["other_features"], np.ndarray)
366 |                         and isinstance(policy_map, dict)
367 |                         and isinstance(value, (float, int))
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
368 |                     ):
369 |                         if np.all(np.isfinite(state_type["grid"])) and np.all(
    |
    = help: Convert to `X | Y`

src/training/pipeline.py:71:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
69 |             persist_config = self.components.persist_config
70 |             mlflow_abs_path = persist_config.get_mlflow_abs_path()
71 |             os.makedirs(mlflow_abs_path, exist_ok=True)
   |             ^^^^^^^^^^^ PTH103
72 |             mlflow_tracking_uri = persist_config.MLFLOW_TRACKING_URI
73 |             mlflow.set_tracking_uri(mlflow_tracking_uri)
   |

src/training/runners.py:15:14: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
14 | # Ensure the src directory is in the Python path *if running directly*
15 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |              ^^^^^^^^^^^^^^^ PTH120
16 | project_root = os.path.dirname(os.path.dirname(script_dir))  # Go up two levels
17 | if project_root not in sys.path:
   |

src/training/runners.py:15:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
14 | # Ensure the src directory is in the Python path *if running directly*
15 | script_dir = os.path.dirname(os.path.abspath(__file__))
   |                              ^^^^^^^^^^^^^^^ PTH100
16 | project_root = os.path.dirname(os.path.dirname(script_dir))  # Go up two levels
17 | if project_root not in sys.path:
   |

src/training/runners.py:16:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
14 | # Ensure the src directory is in the Python path *if running directly*
15 | script_dir = os.path.dirname(os.path.abspath(__file__))
16 | project_root = os.path.dirname(os.path.dirname(script_dir))  # Go up two levels
   |                ^^^^^^^^^^^^^^^ PTH120
17 | if project_root not in sys.path:
18 |     sys.path.insert(0, project_root)
   |

src/training/runners.py:16:32: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
14 | # Ensure the src directory is in the Python path *if running directly*
15 | script_dir = os.path.dirname(os.path.abspath(__file__))
16 | project_root = os.path.dirname(os.path.dirname(script_dir))  # Go up two levels
   |                                ^^^^^^^^^^^^^^^ PTH120
17 | if project_root not in sys.path:
18 |     sys.path.insert(0, project_root)
   |

src/training/runners.py:20:1: E402 Module level import not at top of file
   |
18 |     sys.path.insert(0, project_root)
19 |
20 | from src import config, environment, utils, visualization  # utils is imported here
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
21 | from src.data import DataManager
22 | from src.nn import NeuralNetwork
   |

src/training/runners.py:21:1: E402 Module level import not at top of file
   |
20 | from src import config, environment, utils, visualization  # utils is imported here
21 | from src.data import DataManager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
22 | from src.nn import NeuralNetwork
23 | from src.rl import ExperienceBuffer, Trainer
   |

src/training/runners.py:22:1: E402 Module level import not at top of file
   |
20 | from src import config, environment, utils, visualization  # utils is imported here
21 | from src.data import DataManager
22 | from src.nn import NeuralNetwork
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
23 | from src.rl import ExperienceBuffer, Trainer
24 | from src.stats import StatsCollectorActor
   |

src/training/runners.py:23:1: E402 Module level import not at top of file
   |
21 | from src.data import DataManager
22 | from src.nn import NeuralNetwork
23 | from src.rl import ExperienceBuffer, Trainer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
24 | from src.stats import StatsCollectorActor
25 | from src.training import TrainingComponents, TrainingPipeline
   |

src/training/runners.py:24:1: E402 Module level import not at top of file
   |
22 | from src.nn import NeuralNetwork
23 | from src.rl import ExperienceBuffer, Trainer
24 | from src.stats import StatsCollectorActor
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
25 | from src.training import TrainingComponents, TrainingPipeline
26 | from src.training.logging_utils import (
   |

src/training/runners.py:25:1: E402 Module level import not at top of file
   |
23 | from src.rl import ExperienceBuffer, Trainer
24 | from src.stats import StatsCollectorActor
25 | from src.training import TrainingComponents, TrainingPipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
26 | from src.training.logging_utils import (
27 |     Tee,
   |

src/training/runners.py:26:1: E402 Module level import not at top of file
   |
24 |   from src.stats import StatsCollectorActor
25 |   from src.training import TrainingComponents, TrainingPipeline
26 | / from src.training.logging_utils import (
27 | |     Tee,
28 | |     get_root_logger,
29 | |     setup_file_logging,
30 | | )
   | |_^ E402
31 |
32 |   # Queue for pipeline to send combined state dict {worker_id: state, -1: global_stats}
   |

src/utils/geometry.py:23:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
21 |       for i in range(n + 1):
22 |           p2x, p2y = polygon[i % n]
23 | /         if y > min(p1y, p2y):
24 | |             if y <= max(p1y, p2y):
25 | |                 if x <= max(p1x, p2x):
   | |______________________________________^ SIM102
26 |                       if p1y != p2y:
27 |                           xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
   |
   = help: Combine `if` statements using `and`

src/utils/geometry.py:24:13: SIM102 Use a single `if` statement instead of nested `if` statements
   |
22 |           p2x, p2y = polygon[i % n]
23 |           if y > min(p1y, p2y):
24 | /             if y <= max(p1y, p2y):
25 | |                 if x <= max(p1x, p2x):
   | |______________________________________^ SIM102
26 |                       if p1y != p2y:
27 |                           xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
   |
   = help: Combine `if` statements using `and`

src/utils/helpers.py:45:5: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
   |
43 |     # Use NumPy's recommended way to seed the global RNG state if needed,
44 |     # or preferably use a Generator instance. For simplicity here, we seed global.
45 |     np.random.seed(seed)
   |     ^^^^^^^^^^^^^^ NPY002
46 |     torch.manual_seed(seed)
47 |     if torch.cuda.is_available():
   |

src/utils/helpers.py:82:21: TC006 [*] Add quotes to type expression in `typing.cast()`
   |
80 |         valid_color = tuple(max(0, min(255, c)) for c in color_tuple_0_255)
81 |         # Cast the result to the expected precise tuple type
82 |         return cast(tuple[float, float, float], tuple(c / 255.0 for c in valid_color))
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ TC006
83 |     logger.warning(
84 |         f"Invalid color format for normalization: {color_tuple_0_255}, returning black."
   |
   = help: Add quotes

src/visualization/core/dashboard_renderer.py:10:23: TC001 Move application import `src.stats.StatsCollectorData` into a type-checking block
   |
 9 | from src.environment import GameState
10 | from src.stats import StatsCollectorData  # Keep this import
   |                       ^^^^^^^^^^^^^^^^^^ TC001
11 |
12 | # Import Plotter directly from its module
   |
   = help: Move into type-checking block

src/visualization/core/dashboard_renderer.py:254:17: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
253 |             # Render each worker area
254 |             for worker_id in self.worker_sub_rects.keys():
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
255 |                 worker_area_rect = self.worker_sub_rects[worker_id]
256 |                 game_state = worker_states.get(worker_id)
    |
    = help: Remove `.keys()`

src/visualization/drawing/grid.py:5:25: TC001 Move application import `src.structs.Triangle` into a type-checking block
  |
3 | import pygame
4 |
5 | from src.structs import Triangle
  |                         ^^^^^^^^ TC001
6 |
7 | from ..core import colors, coord_mapper
  |
  = help: Move into type-checking block

src/visualization/drawing/hud.py:57:12: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
55 |         stats_items.append(f"Episodes: {episodes}")
56 |         # Format simulations nicely
57 |         if isinstance(sims, (int, float)):
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
58 |             sims_str = (
59 |                 f"{sims / 1e6:.2f}M"
   |
   = help: Convert to `X | Y`

src/visualization/drawing/shapes.py:14:5: ARG001 Unused function argument: `is_selected`
   |
12 |     topleft: tuple[int, int],
13 |     cell_size: float,
14 |     is_selected: bool = False,
   |     ^^^^^^^^^^^ ARG001
15 |     origin_offset: tuple[int, int] = (0, 0),
16 | ) -> None:
   |

src/visualization/utils.py:15:21: TC006 [*] Add quotes to type expression in `typing.cast()`
   |
13 |         valid_color = tuple(max(0, min(255, c)) for c in color_tuple_0_255)
14 |         # Cast the result to the expected precise tuple type
15 |         return cast(tuple[float, float, float], tuple(c / 255.0 for c in valid_color))
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ TC006
16 |     logger.warning(
17 |         f"Invalid color format for normalization: {color_tuple_0_255}, returning black."
   |
   = help: Add quotes

tests/conftest.py:3:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 |   # File: tests/conftest.py
 2 |   # Top-level conftest for sharing session-scoped fixtures
 3 | / import pytest
 4 | | import torch
 5 | | import torch.optim as optim  # Added for mock_optimizer
 6 | | import numpy as np  # Added for mock_state_type
 7 | | import random  # Added for mock_experience
 8 | | from collections import deque  # Added for filled_mock_buffer
 9 | |
10 | | from src.config import EnvConfig, ModelConfig, TrainConfig, MCTSConfig
11 | |
12 | | # Added imports for moved fixtures
13 | | from src.utils.types import StateType, Experience
14 | | from src.nn import NeuralNetwork, AlphaTriangleNet
15 | | from src.rl import ExperienceBuffer, Trainer
   | |____________________________________________^ I001
   |
   = help: Organize imports

tests/conftest.py:8:25: F401 [*] `collections.deque` imported but unused
   |
 6 | import numpy as np  # Added for mock_state_type
 7 | import random  # Added for mock_experience
 8 | from collections import deque  # Added for filled_mock_buffer
   |                         ^^^^^ F401
 9 |
10 | from src.config import EnvConfig, ModelConfig, TrainConfig, MCTSConfig
   |
   = help: Remove unused import: `collections.deque`

tests/conftest.py:14:35: F401 [*] `src.nn.AlphaTriangleNet` imported but unused
   |
12 | # Added imports for moved fixtures
13 | from src.utils.types import StateType, Experience
14 | from src.nn import NeuralNetwork, AlphaTriangleNet
   |                                   ^^^^^^^^^^^^^^^^ F401
15 | from src.rl import ExperienceBuffer, Trainer
   |
   = help: Remove unused import: `src.nn.AlphaTriangleNet`

tests/conftest.py:88:17: NPY002 Replace legacy `np.random.rand` call with `np.random.Generator`
   |
86 |     other_shape = (mock_model_config.OTHER_NN_INPUT_FEATURES_DIM,)
87 |     return {
88 |         "grid": np.random.rand(*grid_shape).astype(np.float32),
   |                 ^^^^^^^^^^^^^^ NPY002
89 |         "other_features": np.random.rand(*other_shape).astype(np.float32),
90 |     }
   |

tests/conftest.py:89:27: NPY002 Replace legacy `np.random.rand` call with `np.random.Generator`
   |
87 |     return {
88 |         "grid": np.random.rand(*grid_shape).astype(np.float32),
89 |         "other_features": np.random.rand(*other_shape).astype(np.float32),
   |                           ^^^^^^^^^^^^^^ NPY002
90 |     }
   |

tests/conftest.py:99:9: C420 [*] Unnecessary dict comprehension for iterable; use `dict.fromkeys` instead
    |
 97 |     """Creates a mock Experience tuple."""
 98 |     policy_target = (
 99 |         {a: 1.0 / mock_env_config.ACTION_DIM for a in range(mock_env_config.ACTION_DIM)}
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C420
100 |         if mock_env_config.ACTION_DIM > 0
101 |         else {0: 1.0}
    |
    = help: Replace with `dict.fromkeys(iterable)`)

tests/conftest.py:150:9: B007 Loop control variable `i` not used within loop body
    |
148 | ) -> ExperienceBuffer:
149 |     """Provides a buffer filled with some mock experiences."""
150 |     for i in range(mock_experience_buffer.min_size_to_train + 5):
    |         ^ B007
151 |         # Create slightly different experiences
152 |         state_copy = {k: v.copy() for k, v in mock_experience[0].items()}
    |
    = help: Rename unused `i` to `_i`

tests/conftest.py:157:13: NPY002 Replace legacy `np.random.randn` call with `np.random.Generator`
    |
155 |             state_copy["grid"] = state_copy["grid"].copy()
156 |         state_copy["grid"] += (
157 |             np.random.randn(*state_copy["grid"].shape).astype(np.float32) * 0.1
    |             ^^^^^^^^^^^^^^^ NPY002
158 |         )
159 |         exp_copy = (state_copy, mock_experience[1], random.uniform(-1, 1))
    |

tests/environment/test_step.py:4:1: UP035 `typing.Set` is deprecated, use `set` instead
  |
2 | import random
3 | from time import sleep
4 | from typing import Set  # Import Set
  | ^^^^^^^^^^^^^^^^^^^^^^ UP035
5 |
6 | import pytest
  |

tests/environment/test_step.py:4:20: F401 [*] `typing.Set` imported but unused
  |
2 | import random
3 | from time import sleep
4 | from typing import Set  # Import Set
  |                    ^^^ F401
5 |
6 | import pytest
  |
  = help: Remove unused import: `typing.Set`

tests/mcts/conftest.py:6:20: F401 [*] `typing.Any` imported but unused
  |
4 | import sys
5 | from collections.abc import Mapping
6 | from typing import Any, Optional
  |                    ^^^ F401
7 |
8 | import numpy as np
  |
  = help: Remove unused import

tests/mcts/conftest.py:6:25: F401 [*] `typing.Optional` imported but unused
  |
4 | import sys
5 | from collections.abc import Mapping
6 | from typing import Any, Optional
  |                         ^^^^^^^^ F401
7 |
8 | import numpy as np
  |
  = help: Remove unused import

tests/mcts/conftest.py:12:12: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
11 | # Import necessary classes from the source code
12 | src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src"))
   |            ^^^^^^^^^^^^^^^ PTH100
13 | if src_path not in sys.path:
14 |     sys.path.insert(0, src_path)
   |

tests/mcts/conftest.py:12:28: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
11 | # Import necessary classes from the source code
12 | src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src"))
   |                            ^^^^^^^^^^^^ PTH118
13 | if src_path not in sys.path:
14 |     sys.path.insert(0, src_path)
   |

tests/mcts/conftest.py:12:41: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
11 | # Import necessary classes from the source code
12 | src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "src"))
   |                                         ^^^^^^^^^^^^^^^ PTH120
13 | if src_path not in sys.path:
14 |     sys.path.insert(0, src_path)
   |

tests/mcts/conftest.py:16:1: E402 Module level import not at top of file
   |
14 |     sys.path.insert(0, src_path)
15 |
16 | from src.environment import EnvConfig
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
17 | from src.mcts.core.node import Node
18 | from src.utils.types import ActionType, PolicyValueOutput
   |

tests/mcts/conftest.py:17:1: E402 Module level import not at top of file
   |
16 | from src.environment import EnvConfig
17 | from src.mcts.core.node import Node
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
18 | from src.utils.types import ActionType, PolicyValueOutput
   |

tests/mcts/conftest.py:18:1: E402 Module level import not at top of file
   |
16 | from src.environment import EnvConfig
17 | from src.mcts.core.node import Node
18 | from src.utils.types import ActionType, PolicyValueOutput
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
19 |
20 | # Use default NumPy random number generator
   |

tests/mcts/fixtures.py:3:20: F401 [*] `typing.Any` imported but unused
  |
1 | # File: tests/mcts/fixtures.py
2 | from collections.abc import Mapping
3 | from typing import Any, Optional
  |                    ^^^ F401
4 |
5 | import pytest
  |
  = help: Remove unused import

tests/mcts/fixtures.py:3:25: F401 [*] `typing.Optional` imported but unused
  |
1 | # File: tests/mcts/fixtures.py
2 | from collections.abc import Mapping
3 | from typing import Any, Optional
  |                         ^^^^^^^^ F401
4 |
5 | import pytest
  |
  = help: Remove unused import

tests/mcts/test_selection.py:206:5: F841 Local variable `rng` is assigned to but never used
    |
205 |     # Use default_rng for modern NumPy random generation
206 |     rng = np.random.default_rng(42)
    |     ^^^ F841
207 |     selection.add_dirichlet_noise(node, config_copy)
208 |     # Resetting global seed is less ideal, rely on instance if needed elsewhere
    |
    = help: Remove assignment to unused variable `rng`

tests/nn/test_network.py:68:17: NPY002 Replace legacy `np.random.rand` call with `np.random.Generator`
   |
66 |     other_shape = (model_config.OTHER_NN_INPUT_FEATURES_DIM,)
67 |     return {
68 |         "grid": np.random.rand(*grid_shape).astype(np.float32),
   |                 ^^^^^^^^^^^^^^ NPY002
69 |         "other_features": np.random.rand(*other_shape).astype(np.float32),
70 |     }
   |

tests/nn/test_network.py:69:27: NPY002 Replace legacy `np.random.rand` call with `np.random.Generator`
   |
67 |     return {
68 |         "grid": np.random.rand(*grid_shape).astype(np.float32),
69 |         "other_features": np.random.rand(*other_shape).astype(np.float32),
   |                           ^^^^^^^^^^^^^^ NPY002
70 |     }
   |

tests/rl/test_buffer.py:2:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 |   # File: tests/rl/test_buffer.py
 2 | / import pytest
 3 | | import numpy as np
 4 | | from collections import deque
 5 | |
 6 | | from src.rl import ExperienceBuffer
 7 | | from src.config import TrainConfig
 8 | | from src.utils.types import Experience, StateType, PERBatchSample
 9 | | from src.utils.sumtree import SumTree  # Import SumTree
   | |_____________________________________^ I001
10 |
11 |   # REMOVED: Import only needed fixtures from mcts conftest
   |
   = help: Organize imports

tests/rl/test_buffer.py:8:41: F401 [*] `src.utils.types.StateType` imported but unused
  |
6 | from src.rl import ExperienceBuffer
7 | from src.config import TrainConfig
8 | from src.utils.types import Experience, StateType, PERBatchSample
  |                                         ^^^^^^^^^ F401
9 | from src.utils.sumtree import SumTree  # Import SumTree
  |
  = help: Remove unused import

tests/rl/test_buffer.py:8:52: F401 [*] `src.utils.types.PERBatchSample` imported but unused
  |
6 | from src.rl import ExperienceBuffer
7 | from src.config import TrainConfig
8 | from src.utils.types import Experience, StateType, PERBatchSample
  |                                                    ^^^^^^^^^^^^^^ F401
9 | from src.utils.sumtree import SumTree  # Import SumTree
  |
  = help: Remove unused import

tests/rl/test_buffer.py:260:17: NPY002 Replace legacy `np.random.rand` call with `np.random.Generator`
    |
259 |     # Update with some errors
260 |     td_errors = np.random.rand(per_buffer.config.BATCH_SIZE) * 0.5  # Example errors
    |                 ^^^^^^^^^^^^^^ NPY002
261 |     per_buffer.update_priorities(indices, td_errors)
    |

tests/rl/test_buffer.py:268:33: B905 [*] `zip()` without an explicit `strict=` parameter
    |
266 |     expected_priorities_map = {}
267 |     calculated_priorities = (td_errors + per_buffer.per_epsilon) ** per_buffer.per_alpha
268 |     for tree_idx, expected_p in zip(indices, calculated_priorities):
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
269 |         expected_priorities_map[tree_idx] = expected_p  # Last write wins
    |
    = help: Add explicit value for parameter `strict=`

tests/rl/test_buffer.py:272:22: C414 Unnecessary `list()` call within `sorted()`
    |
271 |     # Get the actual updated priorities from the tree for the unique indices involved
272 |     unique_indices = sorted(list(expected_priorities_map.keys()))
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C414
273 |     actual_updated_priorities = [per_buffer.tree.tree[idx] for idx in unique_indices]
274 |     expected_final_priorities = [expected_priorities_map[idx] for idx in unique_indices]
    |
    = help: Remove the inner `list()` call

tests/rl/test_buffer.py:277:5: F841 Local variable `initial_priorities_unique` is assigned to but never used
    |
276 |     # Check if priorities changed (at least one should have)
277 |     initial_priorities_unique = [
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ F841
278 |         per_buffer.tree.tree[idx] for idx in unique_indices
279 |     ]  # Get initial values for comparison *before* update (this needs adjustment - get before update)
    |
    = help: Remove assignment to unused variable `initial_priorities_unique`

tests/rl/test_trainer.py:2:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 |   # File: tests/rl/test_trainer.py
 2 | / import pytest
 3 | | import torch
 4 | | import numpy as np
 5 | | from unittest.mock import MagicMock, patch
 6 | |
 7 | | from src.rl import Trainer, ExperienceBuffer
 8 | | from src.nn import NeuralNetwork
 9 | | from src.config import TrainConfig, EnvConfig, ModelConfig
10 | | from src.utils.types import Experience, StateType, PERBatchSample
   | |_________________________________________________________________^ I001
11 |
12 |   # REMOVED: Import only needed fixtures from mcts conftest
   |
   = help: Organize imports

tests/rl/test_trainer.py:5:27: F401 [*] `unittest.mock.MagicMock` imported but unused
  |
3 | import torch
4 | import numpy as np
5 | from unittest.mock import MagicMock, patch
  |                           ^^^^^^^^^ F401
6 |
7 | from src.rl import Trainer, ExperienceBuffer
  |
  = help: Remove unused import

tests/rl/test_trainer.py:5:38: F401 [*] `unittest.mock.patch` imported but unused
  |
3 | import torch
4 | import numpy as np
5 | from unittest.mock import MagicMock, patch
  |                                      ^^^^^ F401
6 |
7 | from src.rl import Trainer, ExperienceBuffer
  |
  = help: Remove unused import

tests/rl/test_trainer.py:10:41: F401 [*] `src.utils.types.StateType` imported but unused
   |
 8 | from src.nn import NeuralNetwork
 9 | from src.config import TrainConfig, EnvConfig, ModelConfig
10 | from src.utils.types import Experience, StateType, PERBatchSample
   |                                         ^^^^^^^^^ F401
11 |
12 | # REMOVED: Import only needed fixtures from mcts conftest
   |
   = help: Remove unused import: `src.utils.types.StateType`

tests/rl/test_trainer.py:172:31: B905 [*] `zip()` without an explicit `strict=` parameter
    |
170 |     # Check if model parameters changed
171 |     params_changed = False
172 |     for p_initial, p_final in zip(initial_params, trainer_uniform.model.parameters()):
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
173 |         if not torch.equal(p_initial, p_final):
174 |             params_changed = True
    |
    = help: Add explicit value for parameter `strict=`

tests/rl/test_trainer.py:205:31: B905 [*] `zip()` without an explicit `strict=` parameter
    |
203 |     # Check if model parameters changed
204 |     params_changed = False
205 |     for p_initial, p_final in zip(initial_params, trainer_per.model.parameters()):
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
206 |         if not torch.equal(p_initial, p_final):
207 |             params_changed = True
    |
    = help: Add explicit value for parameter `strict=`

Found 165 errors.
[*] 28 fixable with the `--fix` option (34 hidden fixes can be enabled with the `--unsafe-fixes` option).
